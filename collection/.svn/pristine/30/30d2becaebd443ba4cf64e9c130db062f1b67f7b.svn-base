package in.softsolutionzone.util;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.SecureRandom;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class ICICIEncryption {

	private static Cipher encCipher = null;
	private static Cipher decCipher = null;

	public static String encrypt(String input) throws Exception {
		Cipher cipher = getEncCipher();
		byte[] body = cipher.doFinal(input.toString().getBytes());
		return Base64.getEncoder().encodeToString(body);
	}

	public static String decrypt(String input) throws Exception {
		Cipher cipher = getDecCipher();
		input = input.replaceAll("\\r\\n", "");
		byte[] bytes = Base64.getDecoder().decode(input.getBytes(StandardCharsets.UTF_8));
		String output = new String(cipher.doFinal(bytes));
		return output;
	}

	private static Cipher getEncCipher() throws CertificateException, IOException, NoSuchAlgorithmException,
			NoSuchPaddingException, InvalidKeyException {

		if (ICICIEncryption.encCipher != null) {
			return ICICIEncryption.encCipher;
		}

		RSAPublicKey pubkey = getRSAPublicKey();

		// Obtain a RSA Cipher Object
		Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");

		// The source of randomness
		SecureRandom secureRandom = new SecureRandom();

		// Initialize the cipher for encryption
		cipher.init(Cipher.ENCRYPT_MODE, pubkey, secureRandom);

		ICICIEncryption.encCipher = cipher;

		return ICICIEncryption.encCipher;
	}

	private static Cipher getDecCipher() throws Exception {

		if (ICICIEncryption.decCipher != null) {
			return ICICIEncryption.decCipher;
		}

		// The source of randomness
		SecureRandom secureRandom = new SecureRandom();

		// Obtain a RSA Cipher Object
		Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");

		String pvtKey = ResourceReader.readFileToString("classpath:softsolution.pem").trim(); //"Here You have to pass private Key content";
		pvtKey = pvtKey.replaceAll("\\n", "").replace("-----BEGIN PRIVATE KEY-----", "").replace("-----END PRIVATE KEY-----", "");
		
		PKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(Base64.getDecoder().decode(pvtKey));
		KeyFactory keyFactory = KeyFactory.getInstance("RSA");
		PrivateKey priv = (RSAPrivateKey) keyFactory.generatePrivate(privKeySpec);

		// Initialize the cipher for decryption
		cipher.init(Cipher.DECRYPT_MODE, priv, secureRandom);
		ICICIEncryption.decCipher = cipher;

		return ICICIEncryption.decCipher;
	}

	private static RSAPublicKey getRSAPublicKey() throws CertificateException, IOException {
		String certData = ResourceReader.readFileToString("classpath:ICICI_PUBLIC_CERT_PROD.txt").trim(); //"Here You have to pass ICICI public key content";

		InputStream inStream = new ByteArrayInputStream(certData.getBytes());
		CertificateFactory cf = CertificateFactory.getInstance("X.509");
		X509Certificate cert = (X509Certificate) cf.generateCertificate(inStream);
		inStream.close();
		RSAPublicKey pubkey = (RSAPublicKey) cert.getPublicKey();
		return pubkey;
	}

	public static String decryptByAES(String secretKey, String cipherText) throws Exception {
		int INIT_VECTOR_LENGTH = 16;

		// Get raw encoded data
		byte[] encrypted = org.apache.commons.codec.binary.Base64.decodeBase64(cipherText);

		// Slice initialization vector
		IvParameterSpec ivParameterSpec = new IvParameterSpec(encrypted, 0, INIT_VECTOR_LENGTH);
		// Set secret password
		SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getBytes("UTF-8"), "AES");

		Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
		cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivParameterSpec);

		// Trying to get decrypted text
		String decryptedData = new String(
				cipher.doFinal(encrypted, INIT_VECTOR_LENGTH, encrypted.length - INIT_VECTOR_LENGTH));

		return decryptedData;
	}
	
	public static void main(String[] args) {
		
		String data="eKGK9CUTu3DELHfS8W0IwssGPkTP9vRixvCHyq8tuPPuHjwN/INlfgzqnVa/vEGcQd+da6u88jE4jkl9EDKhGLO9rIRNY5ygdQC+x2STv3obivQDj4lePyhvoYJhg5rOFJTTtGp3KZ4pH2uKyRXLpisAF7JoVMhpdZOUqLFz44oW0qHdhkih7i7WhrVjhR7t4MRYpTpOjt0jyLjJdA7mBO6ByaUfG7Wnd0pFCz+y8GBoWHmgGMvdh3d1SAUarFXZ9PfXfisSwCVXl6wVkUED7u5dGtwuCb5CPe3Zu6Px3RFgFr53GMaezp+Fv4L1DFAo/Xf7C6lTsf8RJNM1daJX+Zgcpb97BzXeW0rIl6uOs3Tt6o3kTqMJf2oOgT70RSDT1JmgE8/gz3ZWUfBE7jvjTqX5tvZ+lsRBcTI45WRgXxRn/6GR1Y9WEx2oFGMesmpGwppyelK57XaOr+KUKpykDWsGb4imvXRvtF6CbZEsXrCQLQW8Z2E316lcry9tVGW4IrjJP53NJT14EKOAilcY58ohhyoCstPEoGNHKm93F2KXdamzoA3wfHip4T//rhJNSUXVzuSV2BoC0KGzOeOSejrYC5rV0VxLr3rgmVyq2Xz8FqHf5KUJwCfJ4f74IGVwZ8XG7PpZ91LBxIRG9FHpa2A9KbYtOY5pw4Sn3naaxCU=";
		try {
			System.out.println("data :"+data);
			
			String dec=decrypt(data);
			System.out.println("dec :"+dec);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
